openapi: "3.0.1"
info:
  title: "Incandescent-Server"
  version: "2021-08-23T20:24:26Z"
paths:
  /devices/{zone}/{room}/{device}/{featureset}:
    get:
      parameters:
      - name: "zone"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "room"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "device"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "featureset"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":dynamodb:action/Query"
        credentials:
          Fn::GetAtt: "ApiGatewayRole.Arn"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.zone: "method.request.path.zone"
          integration.request.path.room: "method.request.path.room"
          integration.request.path.device: "method.request.path.device"
          integration.request.path.featureset: "method.request.path.featureset"
        requestTemplates:
          application/json: "#set($deviceRef = \"$input.params('zone')/$input.params('room')/$input.params('device')/$input.params('featureset')\"\
            )\r\n{\r\n    \"TableName\": \"test-stack-DeviceTable-MGKXW4KKJRMR\",\r\
            \n    \"KeyConditionExpression\": \"userId=:v_userId AND deviceRef=:v_deviceRef\"\
            ,\r\n    \"ExpressionAttributeValues\": {\r\n        \":v_userId\": {\"\
            S\":\"seanhodges\"}, \r\n        \":v_deviceRef\": {\"S\":\"$deviceRef\"\
            }\r\n    }\r\n}"
        passthroughBehavior: "when_no_templates"
  /devices/{zone}/{room}/{device}/{featureset}/operations:
    patch:
      parameters:
      - name: "zone"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "room"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "device"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "featureset"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OperationInvoke"
        required: true
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - api_key: []
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: 
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt: "SendOperationFunction.Arn"
              - "/invocations"
        responses:
          default:
            statusCode: "200"
          ".*\\\"errorType\\\": \\\"BadInputError\\\".*":
            statusCode: "400"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n#set ($error\
                \ = $util.parseJson($input.path('$.errorMessage')))\n{\"message\"\
                : \"$error.errorMessage\"}"
        requestParameters:
          integration.request.path.room: "method.request.path.room"
          integration.request.path.featureset: "method.request.path.featureset"
          integration.request.path.device: "method.request.path.device"
          integration.request.path.zone: "method.request.path.zone"
        requestTemplates:
          application/json: "#set($deviceRef = \"$input.params('zone')/$input.params('room')/$input.params('device')/$input.params('featureset')\"\
            )\n#set($inputRoot = $input.path('$'))\n{\n  \"deviceRef\" : \"$deviceRef\"\
            ,\n  \"operation\" : \"$input.path('$.operation')\",\n  \"value\" : \"\
            $inputRoot.value\"\n}"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
components:
  schemas:
    Empty:
      title: "Empty Schema"
      type: "object"
    Error:
      title: "Error Schema"
      type: "object"
      properties:
        errorMessage:
          type: "string"
    OperationInvoke:
      title: "OperationInvoke"
      required:
      - "operation"
      - "value"
      type: "object"
      properties:
        operation:
          type: "string"
        value:
          type: "string"
  securitySchemes:
    api_key:
      type: "apiKey"
      name: "x-api-key"
      in: "header"
x-amazon-apigateway-request-validators:
  Validate body:
    validateRequestParameters: false
    validateRequestBody: true
