AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Serverless application using AWS SAM for headless home automation of various devices.

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${AWS::StackName}-${AWS::Region}-PermissionsBoundary'
    Environment:
      Variables:
        DeviceTableName: !Select [1, !Split ['/', !GetAtt DeviceTable.Arn]] 
        DeviceReceivedQueueName: !GetAtt DeviceReceivedQueue.QueueName
        SecretsManagerEndpoint: !Sub 'https://secretsmanager.${AWS::Region}.amazonaws.com'
        AccessTokenArn: !Ref LightwaveAccessToken

Resources:
  IncandescentLambdaBasicExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: 
            - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: IncandescentLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                - dynamodb:BatchGetItem
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:BatchWriteItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Scan
                - secretsmanager:GetSecretValue
                - sqs:GetQueueAttributes
                - sqs:GetQueueUrl
                - sqs:SendMessage
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - cloudwatch:PutMetricData
                Resource: '*'
  
  ApiGatewayRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: 
              - sts:AssumeRole
        Path: /
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        Policies:
          - PolicyName: IncandescentApiGatewayPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:BatchGetItem
                    - dynamodb:GetItem
                    - dynamodb:Query
                  Resource: '*'

  CloudWatchAccount:
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn: !GetAtt ApiGatewayRole.Arn

  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup

  PythonRestClientLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ./src/layers/restClientLambdaLayer
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  ApiGateway:
    Type: AWS::Serverless::Api
    DependsOn: CloudWatchAccount
    Properties:
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: 'apigateway-openapi.yaml'
      Mode: overwrite
      StageName: live
      EndpointConfiguration: REGIONAL
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          UsagePlanName: Basic
          CreateUsagePlan: PER_API
          Quota:
            Limit: 10000
            Period: DAY
          Throttle:
            BurstLimit: 250
            RateLimit: 500
      TracingEnabled: True
      AccessLogSetting:
        DestinationArn: !Sub ${ApiAccessLogGroup.Arn}
        Format: "{ 'requestId':'$context.requestId', 'ip': '$context.identity.sourceIp', 'caller':'$context.identity.caller', 'user':'$context.identity.user','requestTime':'$context.requestTime', 'xrayTraceId':'$context.xrayTraceId', 'wafResponseCode':'$context.wafResponseCode', 'httpMethod':'$context.httpMethod','resourcePath':'$context.resourcePath', 'status':'$context.status','protocol':'$context.protocol', 'responseLength':'$context.responseLength' }"

  ProcessDevicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/processDevices
      Handler: process-devices.lambda_handler
      AutoPublishAlias: live
      Runtime: python3.9
      Layers:
        - !Ref PythonRestClientLambdaLayer
      Role: !GetAtt IncandescentLambdaBasicExecutionRole.Arn
      Tracing: Active
      Timeout: 10
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: 'rate(10 minutes)'
            Enabled: false

  SendOperationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/sendOperation
      Handler: send-operation.lambda_handler
      AutoPublishAlias: live
      Runtime: python3.9
      Layers:
        - !Ref PythonRestClientLambdaLayer
      Role: !GetAtt IncandescentLambdaBasicExecutionRole.Arn
      Tracing: Active

  UpsertDeviceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/upsertDevice
      Handler: upsert-device.lambda_handler
      AutoPublishAlias: live
      Runtime: python3.9
      Role: !GetAtt IncandescentLambdaBasicExecutionRole.Arn
      Tracing: Active
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DeviceReceivedQueue.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 10

  DeviceReceivedQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 345600 # 4 days
      VisibilityTimeout: 10 # 10 seconds
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt DeviceNotProcessedQueue.Arn
        maxReceiveCount: 5
  
  DeviceNotProcessedQueue:
    Type: AWS::SQS::Queue

  DeviceTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: userId # "user01"
          AttributeType: S
        - AttributeName: deviceRef # "home/living-room/lights/side-lamp"
          AttributeType: S
        - AttributeName: featureSetId
          AttributeType: S
        - AttributeName: deviceId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: deviceRef
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      LocalSecondaryIndexes:
          - IndexName: indexByFeatureSetId
            KeySchema: 
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: featureSetId
              KeyType: RANGE
            Projection: 
              ProjectionType: INCLUDE
              NonKeyAttributes:
              - zoneName
              - zoneId
              - roomName
              - roomId
              - featureSetName
              - deviceName
              - deviceId
              - deviceRef
          - IndexName: indexByDeviceId
            KeySchema: 
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: deviceId
              KeyType: RANGE
            Projection: 
              ProjectionType: INCLUDE
              NonKeyAttributes:
              - zoneName
              - zoneId
              - roomName
              - roomId
              - featureSetName
              - featureSetId
              - deviceName
              - deviceRef

  'Fn::Transform':
    Name: AWS::Include
    Description: Local-defined secrets
    Parameters:
      Location: 'secrets.yml'

  RefreshTokenRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RefreshTokenPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:DescribeSecret
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                  - secretsmanager:UpdateSecretVersionStage
                Resource: '*'
                # Condition:
                #   StringEquals:
                #     secretsmanager:resource/AllowRotationLambdaArn: 'arn:aws:lambda:${AWS:Region}:${AWS:AccountId}:function:${AWS::StackName}-RefreshTokenFunction'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
  
  RefreshTokenInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: RefreshTokenFunction
    Properties:
      FunctionName: !GetAtt RefreshTokenFunction.Arn
      Action: lambda:InvokeFunction
      Principal: 'secretsmanager.amazonaws.com'

  RefreshTokenFunction:
    # Function named so it can be referenced in RefreshTokenPolicy
    Name: ${AWS::StackName}-RefreshTokenFunction
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/refreshToken
      Handler: refresh-token.lambda_handler
      AutoPublishAlias: live
      Runtime: python3.9
      Layers:
        - !Ref PythonRestClientLambdaLayer
      Role: !GetAtt RefreshTokenRole.Arn
      Tracing: Active
      Environment:
        Variables:
          ClientAuthTokenArn: !Ref LightwaveClientAuthToken
          RefreshTokenArn: !Ref LightwaveRefreshToken

  LightwaveAccessToken:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Leave blank. This is set by the token refresh function
      SecretString: <UNSET>

  LightwaveTokenRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      SecretId: !Ref LightwaveAccessToken
      RotationLambdaARN: !GetAtt RefreshTokenFunction.Arn
      RotationRules:
        # TODO: Should be 10h but SM doesn't support less than 1d. Should make a custom trigger.
        # See https://forums.aws.amazon.com/thread.jspa?threadID=304917
        AutomaticallyAfterDays: 1

  RecordEnergyConsumptionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/recordEnergyConsumption
      Handler: record-energy-consumption.lambda_handler
      AutoPublishAlias: live
      Runtime: python3.9
      Layers:
        - !Ref PythonRestClientLambdaLayer
      Role: !GetAtt IncandescentLambdaBasicExecutionRole.Arn
      Tracing: Active
      Timeout: 15
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: 'rate(1 hour)'

Outputs:
  ServerApi:
    Description: URL for the server API
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com'
